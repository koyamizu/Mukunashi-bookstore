<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.demo.repository.BookMapper">

<!--以下を記述してresultMapを完成させてみてください-->
	<resultMap id="BookStockMap"
		type="<!-- ここにパッケージ名＋クラス名を記述 -->>">
<!--	idカラムはstock_numが主キーに設定されないようにするためのダミー-->
		<id property="id" column="id"/>
		<!-- 
		
		ここにresultMapの設定を記述いきます
		
		 -->
	</resultMap>
	
	<resultMap id="OrderHistoryMap" type="com.example.demo.entity.History">
		<id property="orderId" column="order_id"/>
		<result property="orderDateTime" column="created_at"/>
		<association property="customer" javaType="com.example.demo.entity.Customer">
			<id property="id" column="customer_id"/>
			<result property="name" column="name"/>
			<result property="tel" column="tel"/>
			<result property="postNum" column="post_num"/>
			<result property="address" column="address"/>
		</association>
		<collection property="items" ofType="com.example.demo.entity.Item">
			<result property="num" column="num"/>
			<association property="book" javaType="com.example.demo.entity.Book">
				<id property="isbn" column="isbn" />
				<result property="title" column="title" />
				<result property="price" column="price" />
				<result property="publisher" column="publisher" />
				<result property="published" column="published" />
			</association>
		</collection>
	</resultMap>
	
	<select id="ここにメソッド名を記述" <!-- ここにresultMapを記述 -->>
		SELECT
		  bs.stock_num
		  ,bk.isbn
		  ,bk.title
		  ,bk.price
		  ,bk.publisher
		  ,bk.published
		FROM
		  books AS bk
		  LEFT JOIN book_stocks AS bs
		  ON bk.isbn = bs.isbn
		;
	</select>
	
	<select id="ここにメソッド名を記述" <!-- ここにparameterTypeを記述--> <!--  ここにresultTypeを記述-->>
		SELECT
		  isbn
		  ,title
		  ,price
		  ,publisher
		  ,published
		FROM
		  books
		WHERE
		  isbn = #{isbn}
		;
	</select>
	
	<select id="ここにメソッド名を記述" <!-- ここにparameterTypeを記述-->>
		SELECT
		  stock_num
		FROM
		  book_stocks
		WHERE
		  isbn = #{isbn}
		;
	</select>
	
	<select id="selectCustomerId" parameterType="com.example.demo.entity.Customer">
		SELECT
		  customer_id
		FROM
		  customers
		WHERE
		  tel = #{tel}
		;
	</select>
		
	<select id="selectOrderId" resultType="Integer">
		SELECT
		  order_id
		FROM
		  order_histories
		WHERE
		  customer_id = #{customerId}
		  AND
		  CAST(created_at AS DATE) = #{orderDate}
		ORDER BY order_id DESC
		;
	</select>
	
	<select id="selectOrderHistory" resultMap="OrderHistoryMap">
		SELECT
		  o.order_id
		  ,o.created_at
		  ,c.name
		  ,c.tel
		  ,c.post_num
		  ,c.address
		  ,b.isbn
		  ,b.title
		  ,b.price
		  ,b.publisher
		  ,b.published
		  ,i.num
		FROM
		  order_histories AS o
		  INNER JOIN order_items AS i
		  ON o.order_id = i.order_id
		  INNER JOIN customers AS c
		  ON o.customer_id = c.customer_id
		  INNER JOIN books AS b
		  ON i.isbn = b.isbn
		WHERE
		  o.order_id = #{orderId}
		;
	</select>
	
<!--	引数（とプレースホルダ）が複数ある場合は、parameterTypeは記述できない-->
	<update id="update">
		UPDATE
		  book_stocks
		SET
		  stock_num = #{updatedStockNum}
		WHERE
		  isbn = #{isbn}
		;
	</update>
	
<!--	Customerクラスのオブジェクトを挿入するSQLおよびMapperファイルの設定を記述-->
	
	<insert id="insertOrder" parameterType="Integer">
		INSERT INTO
		  order_histories(customer_id)
		VALUES
		  (#{customerId})
		;
	</insert>
	
	<insert id="insertItems">
		INSERT INTO
		  order_items(order_id,isbn,num)
		VALUES
		  <foreach collection="itemSet" index="key" item="value" separator=",">
			  (#{orderId},#{key.isbn},#{value})
		  </foreach>
		;
	</insert>
	
	<delete id="deleteOrder">
		DELETE FROM
		  order_histories
		WHERE
		  order_id = #{orderId}
		;
	</delete>
</mapper>